[tool.mypy]
python_version = "3.11"
explicit_package_bases = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Allow some flexibility for FastAPI
disallow_any_generics = false
packages = ["app"]
plugins = ["sqlalchemy.ext.mypy.plugin"]
# Ignore missing imports for some packages
[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "jose.*",
    "passlib.*",
    "fastapi",
    "fastapi.*",
    "starlette.*",
    "pydantic",
    "pydantic.*",
    "pydantic_settings.*",
    "slowapi",
    "slowapi.*",
    "structlog",
    "structlog.*",
    "sentry_sdk",
    "sentry_sdk.*",
    "httpx",
    "jwt",
    "authlib.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["psutil"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["app.services.background.celery_tasks"]
disallow_untyped_decorators = false
[[tool.mypy.overrides]]
module = [
    "app.api.*",
]
disallow_untyped_decorators = false


[[tool.mypy.overrides]]
# Re-enable strict decorator checks for hardened API modules
module = [
    "app.api.auth.login",
    "app.api.auth.session_management",
    "app.api.auth.api_keys",
    "app.api.system.health",
    "app.api.integrations.websockets",
]
disallow_untyped_decorators = true


[[tool.mypy.overrides]]
module = [
    "celery",
    "celery.*",
    "emails",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "app.models.core.base",
    "app.models.auth.user",
    "app.models.system.audit_log",
    "app.models.auth.api_key",
    "app.models.auth.refresh_token",
    "app.crud.system.audit_log",
]
disallow_any_generics = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "app.services.background.celery",
    "app.services.auth.oauth",
    "app.services.middleware.rate_limiter",
]
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false

[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    "alembic/versions/*",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLOT", # flake8-slots
    "TRY", # flake8-try
    "NPY", # flake8-numpy
    "AIR", # flake8-import-conventions
    "PERF", # flake8-perf
    "PTH", # flake8-use-pathlib
    "LOG", # flake8-logging-format
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "UP017",  # Use datetime.UTC alias - disabled for Python 3.11 compatibility
    "TCH001", # Type checking imports should be in TYPE_CHECKING block
    "TCH002", # Type checking imports should be in TYPE_CHECKING block
    "TCH003", # Type checking imports should be in TYPE_CHECKING block
    "ARG001", # Unused function argument
    "SIM105", # Use contextlib.suppress instead of try-except-pass
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "T201", # print found (allow in scripts)
    "SLF001", # Private member accessed (allow in tests)
    "ARG002", # Unused method argument (allow in tests)
    "RUF001", # String contains ambiguous character (allow in scripts)
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.per-file-ignores]
# Tests intentionally bend some style rules (e.g., env setup before imports, broad
# exception assertions, dummy lambdas with unused params, naive datetimes).
"tests/**/*.py" = [
    "ARG005", # unused lambda args in test helpers
    "TRY002", # create your own exception (acceptable in tests)
    "TRY003", # long messages outside exception class
    "E402",   # module import not at top of file (env setup first)
    "E401",   # multiple imports on one line (test-only convenience)
    "B017",   # pytest.raises(Exception) considered evil
    "SIM117", # nested with statements
    "SIM300", # Yoda conditions (allowed in tests)
    "DTZ001", # datetime without tz in test data
    "C405",   # unnecessary list literal (test data)
    "C408",   # unnecessary dict() call (test data)
    "PTH118", # prefer Path over os.path.join (not required in tests)
    "F841",   # assigned but unused (intentional in some tests)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
extend-exclude = """
/alembic/versions/
"""

[tool.coverage.run]
branch = true
source = ["app"]
omit = [
    "app/api/integrations/*",
    "app/services/external/*",
    "app/services/background/*",
    "app/services/middleware/websockets.py",
    "app/api/system/background_tasks.py",
]

[tool.coverage.report]
show_missing = true
 