version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # pgBouncer for connection pooling (optional)
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_DBNAME: ${POSTGRES_DB}
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      PGBOUNCER_PORT: 5432
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
      PGBOUNCER_MAX_DB_CONNECTIONS: 50
      PGBOUNCER_MAX_USER_CONNECTIONS: 50
    ports:
      - "${PGBOUNCER_PORT:-5433}:5432"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - pgbouncer  # Only start when explicitly requested

  # Optional Redis service - only used when ENABLE_REDIS=true
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - redis  # Only start when explicitly requested

  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ENABLE_REDIS: ${ENABLE_REDIS:-false}
      ENABLE_WEBSOCKETS: ${ENABLE_WEBSOCKETS:-false}
      ENABLE_CELERY: ${ENABLE_CELERY:-false}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      ENABLE_SENTRY: ${ENABLE_SENTRY:-false}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
    ports:
      - "${API_PORT}:8000"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - .:/code  # Mount entire project for live code editing
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Optional Celery worker service - only used when ENABLE_CELERY=true
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ENABLE_REDIS: ${ENABLE_REDIS:-false}
      ENABLE_WEBSOCKETS: ${ENABLE_WEBSOCKETS:-false}
      ENABLE_CELERY: ${ENABLE_CELERY:-false}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - .:/code
    command: celery -A app.services.celery worker --loglevel=info
    profiles:
      - celery  # Only start when explicitly requested

  # Optional Flower monitoring service - only used when ENABLE_CELERY=true
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ENABLE_REDIS: ${ENABLE_REDIS:-false}
      ENABLE_WEBSOCKETS: ${ENABLE_WEBSOCKETS:-false}
      ENABLE_CELERY: ${ENABLE_CELERY:-false}
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - .:/code
    command: celery -A app.services.celery flower --port=5555
    profiles:
      - celery  # Only start when explicitly requested

  # Optional GlitchTip error monitoring service
  glitchtip:
    image: glitchtip/glitchtip:latest
    environment:
      - DJANGO_SETTINGS_MODULE=glitchtip.settings.production
      - GLITCHTIP_SECRET_KEY=${GLITCHTIP_SECRET_KEY:-your-secret-key-here}
      - GLITCHTIP_DB_ENGINE=django.db.backends.postgresql
      - GLITCHTIP_DB_NAME=${POSTGRES_DB}
      - GLITCHTIP_DB_USER=${POSTGRES_USER}
      - GLITCHTIP_DB_PASSWORD=${POSTGRES_PASSWORD}
      - GLITCHTIP_DB_HOST=postgres
      - GLITCHTIP_DB_PORT=5432
      - GLITCHTIP_REDIS_URL=redis://redis:6379/0
      - GLITCHTIP_EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
    ports:
      - "${GLITCHTIP_PORT:-8001}:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring  # Only start when explicitly requested

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge 