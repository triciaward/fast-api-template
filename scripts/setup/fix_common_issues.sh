#!/bin/bash

# =============================================================================
# FastAPI Template - Common Issues Fix Script
# =============================================================================
# This script addresses the specific issues mentioned in user feedback

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "============================================================================="
    echo "$1"
    echo "============================================================================="
    echo -e "${NC}"
}

print_header "FastAPI Template - Common Issues Fix Script"
echo "This script addresses the specific setup issues you encountered."
echo ""

# =============================================================================
# Issue 1: Missing .env file with Docker environment variables
# =============================================================================
print_header "Issue 1: Creating .env file with Docker environment variables"

if [ ! -f ".env" ]; then
    print_status "Creating .env file with all required Docker variables..."
    
    cat > .env << 'EOF'
# =============================================================================
# FastAPI Template Environment Configuration
# =============================================================================
# Generated by fix_common_issues.sh

# =============================================================================
# Docker Configuration (Required for docker-compose)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
PGBOUNCER_PORT=5433
REDIS_PORT=6379
API_PORT=8000
FLOWER_PORT=5555
GLITCHTIP_PORT=8001

# =============================================================================
# Application Settings
# =============================================================================
PROJECT_NAME=FastAPI Template
VERSION=1.0.0
DESCRIPTION=FastAPI Template with Authentication
API_V1_STR=/api/v1
ENVIRONMENT=development

# =============================================================================
# Security & Authentication
# =============================================================================
SECRET_KEY=dev_secret_key_change_in_production
ACCESS_TOKEN_EXPIRE_MINUTES=15
ALGORITHM=HS256

# =============================================================================
# Database Configuration
# =============================================================================
DATABASE_URL=postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

# =============================================================================
# CORS Configuration (JSON format)
# =============================================================================
BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:4200

# =============================================================================
# Optional Features (disabled by default)
# =============================================================================
ENABLE_REDIS=false
ENABLE_WEBSOCKETS=false
ENABLE_CELERY=false
ENABLE_RATE_LIMITING=false
ENABLE_SENTRY=false

# =============================================================================
# Redis Configuration
# =============================================================================
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# Email Configuration (optional)
# =============================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_TLS=true
SMTP_SSL=false
FROM_EMAIL=noreply@example.com
FROM_NAME=FastAPI Template

# =============================================================================
# Superuser Bootstrap (optional)
# =============================================================================
# Uncomment and set these to create the first superuser automatically
# FIRST_SUPERUSER=admin@example.com
# FIRST_SUPERUSER_PASSWORD=admin_password_123
EOF

    print_success "Created .env file with all required Docker environment variables"
else
    print_success ".env file already exists"
    
    # Check if Docker variables are missing
    missing_vars=()
    for var in POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD POSTGRES_PORT REDIS_PORT API_PORT; do
        if ! grep -q "^${var}=" .env; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        print_warning "Missing Docker environment variables: ${missing_vars[*]}"
        print_status "Adding missing variables to .env file..."
        
        cat >> .env << 'EOF'

# =============================================================================
# Docker Configuration (Added by fix script)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
REDIS_PORT=6379
API_PORT=8000
EOF
        
        print_success "Added missing Docker environment variables"
    fi
fi

# =============================================================================
# Issue 2: Fix CORS configuration format
# =============================================================================
print_header "Issue 2: Fixing CORS configuration format"

# Check current CORS format
if grep -q "BACKEND_CORS_ORIGINS=" .env; then
    cors_value=$(grep "^BACKEND_CORS_ORIGINS=" .env | cut -d'=' -f2-)
    
    # Check if it's in the wrong format (comma-separated string)
    if [[ "$cors_value" == *","* && "$cors_value" != *"["* ]]; then
        print_warning "CORS configuration is in wrong format (comma-separated string)"
        print_status "Converting to JSON array format..."
        
        # Convert comma-separated to JSON array
        cors_array=$(echo "$cors_value" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        
        # Update the .env file
        sed -i.bak "s/^BACKEND_CORS_ORIGINS=.*/BACKEND_CORS_ORIGINS=$cors_array/" .env
        rm -f .env.bak
        
        print_success "Fixed CORS configuration format"
    else
        print_success "CORS configuration is already in correct JSON format"
    fi
else
    print_status "Adding CORS configuration..."
    echo 'BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:4200' >> .env
    print_success "Added CORS configuration"
fi

# =============================================================================
# Issue 3: Validate alembic.ini configuration
# =============================================================================
print_header "Issue 3: Validating alembic.ini configuration"

if [ -f "alembic.ini" ]; then
    print_success "alembic.ini file exists"
    
    # Check if sqlalchemy.url is properly configured
    if grep -q "sqlalchemy.url = postgresql://" alembic.ini; then
        print_success "alembic.ini has proper database URL configuration"
    else
        print_warning "alembic.ini database URL may need updating"
        print_status "Current database URL:"
        grep "sqlalchemy.url" alembic.ini || echo "No sqlalchemy.url found"
    fi
else
    print_error "alembic.ini not found! This is required for database migrations."
    print_status "Creating alembic.ini with proper configuration..."
    
    cat > alembic.ini << 'EOF'
[alembic]
script_location = alembic
sqlalchemy.url = postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

[post_write_hooks]
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 79 REVISION_SCRIPT_FILENAME

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S
EOF
    
    print_success "Created alembic.ini with proper configuration"
fi

# =============================================================================
# Issue 4: Fix Python path issues
# =============================================================================
print_header "Issue 4: Setting up Python path"

# Set PYTHONPATH for current session
export PYTHONPATH=.
print_success "Set PYTHONPATH=."

# Add to shell profile for future sessions
shell_profile=""
if [ -f "$HOME/.bashrc" ]; then
    shell_profile="$HOME/.bashrc"
elif [ -f "$HOME/.zshrc" ]; then
    shell_profile="$HOME/.zshrc"
elif [ -f "$HOME/.bash_profile" ]; then
    shell_profile="$HOME/.bash_profile"
fi

if [ -n "$shell_profile" ]; then
    if ! grep -q "PYTHONPATH=." "$shell_profile"; then
        print_status "Adding PYTHONPATH to $shell_profile for future sessions..."
        echo 'export PYTHONPATH=.' >> "$shell_profile"
        print_success "Added PYTHONPATH to shell profile"
    else
        print_success "PYTHONPATH already set in shell profile"
    fi
fi

# =============================================================================
# Issue 5: Handle migration conflicts
# =============================================================================
print_header "Issue 5: Handling migration conflicts"

print_status "Checking migration status..."
if command -v alembic >/dev/null 2>&1; then
    # Try to run migrations
    if alembic upgrade head 2>/dev/null; then
        print_success "Database migrations completed successfully"
    else
        print_warning "Migration failed. This might be due to existing tables."
        print_status "Attempting to stamp head to mark migrations as complete..."
        if alembic stamp head; then
            print_success "Migration head stamped successfully"
        else
            print_error "Failed to stamp migration head. Please check your database connection."
        fi
    fi
else
    print_warning "Alembic not found. Please install it with: pip install alembic"
fi

# =============================================================================
# Issue 6: Verify bootstrap script location
# =============================================================================
print_header "Issue 6: Verifying bootstrap script location"

if [ -f "app/bootstrap_superuser.py" ]; then
    print_success "Bootstrap script found at app/bootstrap_superuser.py"
    
    # Check if superuser credentials are set
    if grep -q "FIRST_SUPERUSER=" .env && ! grep -q "# FIRST_SUPERUSER=" .env; then
        print_status "Superuser credentials found in .env"
        print_info "You can create a superuser with:"
        echo "   PYTHONPATH=. python app/bootstrap_superuser.py"
    else
        print_status "No superuser credentials in .env. To create one:"
        echo "  1. Add FIRST_SUPERUSER=admin@example.com to .env"
        echo "  2. Add FIRST_SUPERUSER_PASSWORD=your_password to .env"
        echo "  3. Run: PYTHONPATH=. python app/bootstrap_superuser.py"
    fi
else
    print_error "Bootstrap script not found at app/bootstrap_superuser.py"
fi

# =============================================================================
# Issue 7: Start Docker services
# =============================================================================
print_header "Issue 7: Starting Docker services"

if command -v docker >/dev/null 2>&1 && command -v docker-compose >/dev/null 2>&1; then
    print_status "Starting all services with Docker Compose..."
    if docker-compose up -d; then
        print_success "All services started successfully"
        
        # Wait for services to be ready
        print_status "Waiting for services to be ready..."
        sleep 10
        
        # Check if services are running
        if docker-compose ps | grep -q "Up"; then
            print_success "All services are running and ready"
            print_status "Service status:"
            docker-compose ps
        else
            print_warning "Services may not be fully ready yet"
        fi
    else
        print_error "Failed to start services"
    fi
else
    print_warning "Docker/Docker Compose not available. Please start services manually:"
    echo "  docker-compose up -d"
fi

# =============================================================================
# Final verification
# =============================================================================
print_header "Final Verification"

print_status "Running setup verification..."
if [ -f "scripts/setup/verify_setup.py" ]; then
    python scripts/setup/verify_setup.py
else
    print_warning "Verification script not found. Please run:"
    echo "  python scripts/setup/verify_setup.py"
fi

print_header "Fix Script Complete! 🎉"

print_success "All common issues have been addressed!"
echo ""
echo "📋 Your application is now running in Docker:"
echo "   - API: http://localhost:8000"
echo "   - Docs: http://localhost:8000/docs"
echo ""
echo "🐳 Docker Services:"
echo "   - FastAPI App: Running on port 8000"
echo "   - PostgreSQL: Running on port 5432"
echo ""
echo "🔧 Development Commands:"
echo "   - View logs: docker-compose logs -f"
echo "   - Stop services: docker-compose down"
echo "   - Restart services: docker-compose restart"
echo ""
echo "🔧 Troubleshooting:"
echo "   - View all logs: docker-compose logs"
echo "   - View specific service logs: docker-compose logs api"
echo "   - Reset everything: docker-compose down -v && docker-compose up -d"
echo "   - Check service status: docker-compose ps"
echo ""

print_success "Happy coding! 🚀" 