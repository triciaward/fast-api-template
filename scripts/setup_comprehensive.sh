#!/bin/bash

# =============================================================================
# FastAPI Template Comprehensive Setup Script
# =============================================================================
# This script addresses all common setup issues and provides a complete
# development environment setup with validation.

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_status() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "============================================================================="
    echo "$1"
    echo "============================================================================="
    echo -e "${NC}"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

print_header "FastAPI Template Comprehensive Setup"
echo "This script will set up your development environment and address common issues."
echo ""

# =============================================================================
# 1. Check Prerequisites
# =============================================================================
print_header "1. Checking Prerequisites"

# Check Python version
if command_exists python3; then
    python_version=$(python3 --version 2>&1 | cut -d' ' -f2)
    print_success "Python version: $python_version"
    
    # Check if Python 3.11+
    python_major=$(echo $python_version | cut -d'.' -f1)
    python_minor=$(echo $python_version | cut -d'.' -f2)
    
    if [ "$python_major" -lt 3 ] || ([ "$python_major" -eq 3 ] && [ "$python_minor" -lt 11 ]); then
        print_error "Python 3.11+ is required. Current version: $python_version"
        exit 1
    fi
else
    print_error "Python 3 is not installed. Please install Python 3.11+ first."
    exit 1
fi

# Check Docker
if command_exists docker; then
    docker_version=$(docker --version 2>&1 | cut -d' ' -f3 | sed 's/,//')
    print_success "Docker version: $docker_version"
else
    print_warning "Docker not found. You'll need Docker for database and Redis services."
fi

# Check Docker Compose
if command_exists docker-compose; then
    print_success "Docker Compose found"
elif command_exists docker && docker compose version >/dev/null 2>&1; then
    print_success "Docker Compose (v2) found"
else
    print_warning "Docker Compose not found. You'll need it for running services."
fi

# =============================================================================
# 2. Create Virtual Environment
# =============================================================================
print_header "2. Setting up Virtual Environment"

if [ ! -d "venv" ]; then
    print_status "Creating virtual environment..."
    python3 -m venv venv
    print_success "Virtual environment created"
else
    print_success "Virtual environment already exists"
fi

# Activate virtual environment
print_status "Activating virtual environment..."
source venv/bin/activate

# Upgrade pip
print_status "Upgrading pip..."
pip install --upgrade pip

# Install dependencies
print_status "Installing Python dependencies..."
pip install -r requirements.txt

# =============================================================================
# 3. Create .env File
# =============================================================================
print_header "3. Creating Environment Configuration"

if [ ! -f ".env" ]; then
    print_status "Creating .env file with comprehensive configuration..."
    
    cat > .env << 'EOF'
# =============================================================================
# FastAPI Template Environment Configuration
# =============================================================================
# Generated by setup script - customize as needed

# =============================================================================
# Application Settings
# =============================================================================
PROJECT_NAME=FastAPI Template
VERSION=1.0.0
DESCRIPTION=FastAPI Template with Authentication
API_V1_STR=/api/v1
ENVIRONMENT=development

# =============================================================================
# Security & Authentication
# =============================================================================
# Change this in production! Generate with: openssl rand -hex 32
SECRET_KEY=dev_secret_key_change_in_production
ACCESS_TOKEN_EXPIRE_MINUTES=15
ALGORITHM=HS256

# Refresh Token Configuration
REFRESH_TOKEN_EXPIRE_DAYS=30
REFRESH_TOKEN_COOKIE_NAME=refresh_token
REFRESH_TOKEN_COOKIE_SECURE=false
REFRESH_TOKEN_COOKIE_HTTPONLY=true
REFRESH_TOKEN_COOKIE_SAMESITE=lax
REFRESH_TOKEN_COOKIE_PATH=/api/v1/auth

# Session Management
MAX_SESSIONS_PER_USER=5
SESSION_CLEANUP_INTERVAL_HOURS=24

# =============================================================================
# Database Configuration
# =============================================================================
# PostgreSQL connection string
DATABASE_URL=postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

# Database Connection Pool Settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_RECYCLE=3600
DB_POOL_TIMEOUT=30
DB_POOL_PRE_PING=true

# =============================================================================
# Docker Configuration (Required for docker-compose)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
PGBOUNCER_PORT=5433
REDIS_PORT=6379
API_PORT=8000
FLOWER_PORT=5555
GLITCHTIP_PORT=8001

# =============================================================================
# Redis Configuration (Optional)
# =============================================================================
ENABLE_REDIS=false
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# WebSockets (Optional)
# =============================================================================
ENABLE_WEBSOCKETS=false

# =============================================================================
# Celery Background Tasks (Optional)
# =============================================================================
ENABLE_CELERY=false
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/1
CELERY_TASK_SERIALIZER=json
CELERY_RESULT_SERIALIZER=json
CELERY_ACCEPT_CONTENT=["json"]
CELERY_TIMEZONE=UTC
CELERY_ENABLE_UTC=true
CELERY_TASK_TRACK_STARTED=true
CELERY_TASK_TIME_LIMIT=1800
CELERY_TASK_SOFT_TIME_LIMIT=1500
CELERY_WORKER_PREFETCH_MULTIPLIER=1
CELERY_WORKER_MAX_TASKS_PER_CHILD=1000

# Celery Test Configuration (for eager execution)
CELERY_TASK_ALWAYS_EAGER=false
CELERY_TASK_EAGER_PROPAGATES=false

# =============================================================================
# Rate Limiting (Optional)
# =============================================================================
ENABLE_RATE_LIMITING=false
RATE_LIMIT_STORAGE_BACKEND=memory
RATE_LIMIT_DEFAULT=100/minute
RATE_LIMIT_LOGIN=5/minute
RATE_LIMIT_REGISTER=3/minute
RATE_LIMIT_EMAIL_VERIFICATION=3/minute
RATE_LIMIT_PASSWORD_RESET=3/minute
RATE_LIMIT_OAUTH=10/minute
RATE_LIMIT_ACCOUNT_DELETION=3/minute

# =============================================================================
# OAuth Configuration (Optional)
# =============================================================================
# Google OAuth
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# Apple OAuth
APPLE_CLIENT_ID=
APPLE_TEAM_ID=
APPLE_KEY_ID=
APPLE_PRIVATE_KEY=

# =============================================================================
# Email Configuration (Optional)
# =============================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_TLS=true
SMTP_SSL=false
FROM_EMAIL=noreply@example.com
FROM_NAME=FastAPI Template

# Email Verification
VERIFICATION_TOKEN_EXPIRE_HOURS=24
FRONTEND_URL=http://localhost:3000

# Password Reset
PASSWORD_RESET_TOKEN_EXPIRE_HOURS=1

# Account Deletion (GDPR compliance)
ACCOUNT_DELETION_TOKEN_EXPIRE_HOURS=24
ACCOUNT_DELETION_GRACE_PERIOD_DAYS=7
ACCOUNT_DELETION_REMINDER_DAYS=[3,1]

# =============================================================================
# CORS Configuration
# =============================================================================
# Format: JSON array of allowed origins
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://localhost:4200"]

# =============================================================================
# Logging Configuration
# =============================================================================
LOG_LEVEL=INFO
LOG_FORMAT=json
ENABLE_FILE_LOGGING=false
LOG_FILE_PATH=logs/app.log
LOG_FILE_MAX_SIZE=10MB
LOG_FILE_BACKUP_COUNT=5
ENABLE_COLORED_LOGS=true
LOG_INCLUDE_TIMESTAMP=true
LOG_INCLUDE_PID=true
LOG_INCLUDE_THREAD=true

# =============================================================================
# Error Monitoring (Optional)
# =============================================================================
ENABLE_SENTRY=false
SENTRY_DSN=
SENTRY_ENVIRONMENT=development
SENTRY_TRACES_SAMPLE_RATE=0.1
SENTRY_PROFILES_SAMPLE_RATE=0.1

# GlitchTip Configuration (for local error monitoring)
GLITCHTIP_SECRET_KEY=your-secret-key-here

# =============================================================================
# Superuser Bootstrap (Optional)
# =============================================================================
# Set these to create the first superuser automatically
# FIRST_SUPERUSER=admin@example.com
# FIRST_SUPERUSER_PASSWORD=admin_password_123
EOF

    print_success "Created .env file with comprehensive configuration"
else
    print_success ".env file already exists"
fi

# =============================================================================
# 4. Validate alembic.ini
# =============================================================================
print_header "4. Validating Database Configuration"

if [ -f "alembic.ini" ]; then
    print_success "alembic.ini found"
    
    # Check if sqlalchemy.url is properly configured
    if grep -q "sqlalchemy.url = postgresql://" alembic.ini; then
        print_success "alembic.ini has proper database URL configuration"
    else
        print_warning "alembic.ini database URL may need updating"
    fi
else
    print_error "alembic.ini not found! This is required for database migrations."
    exit 1
fi

# =============================================================================
# 5. Start Database Services
# =============================================================================
print_header "5. Starting Database Services"

if command_exists docker && command_exists docker-compose; then
    print_status "Starting PostgreSQL with Docker Compose..."
    docker-compose up postgres -d
    
    # Wait for PostgreSQL to be ready
    print_status "Waiting for PostgreSQL to be ready..."
    sleep 5
    
    # Check if PostgreSQL is running
    if docker-compose ps postgres | grep -q "Up"; then
        print_success "PostgreSQL is running"
    else
        print_error "PostgreSQL failed to start"
        exit 1
    fi
else
    print_warning "Docker/Docker Compose not available. Please start PostgreSQL manually."
    print_status "You can start it with: docker-compose up postgres -d"
fi

# =============================================================================
# 6. Run Database Migrations
# =============================================================================
print_header "6. Running Database Migrations"

# Set PYTHONPATH for alembic
export PYTHONPATH=.

print_status "Running database migrations..."
if alembic upgrade head; then
    print_success "Database migrations completed successfully"
else
    print_warning "Migration failed. This might be due to existing tables."
    print_status "Attempting to stamp head to mark migrations as complete..."
    if alembic stamp head; then
        print_success "Migration head stamped successfully"
    else
        print_error "Failed to stamp migration head. Please check your database connection."
        exit 1
    fi
fi

# =============================================================================
# 7. Create Initial Superuser (Optional)
# =============================================================================
print_header "7. Setting up Initial Superuser"

if [ -f "app/bootstrap_superuser.py" ]; then
    print_success "Bootstrap script found at app/bootstrap_superuser.py"
    
    # Check if superuser credentials are set
    if grep -q "FIRST_SUPERUSER=" .env && ! grep -q "# FIRST_SUPERUSER=" .env; then
        print_status "Superuser credentials found in .env, creating superuser..."
        if python app/bootstrap_superuser.py; then
            print_success "Superuser created successfully"
        else
            print_warning "Failed to create superuser. You can create one manually later."
        fi
    else
        print_status "No superuser credentials in .env. You can create one manually:"
        echo "  1. Add FIRST_SUPERUSER=admin@example.com to .env"
        echo "  2. Add FIRST_SUPERUSER_PASSWORD=your_password to .env"
        echo "  3. Run: python app/bootstrap_superuser.py"
    fi
else
    print_error "Bootstrap script not found at app/bootstrap_superuser.py"
fi

# =============================================================================
# 8. Setup Verification
# =============================================================================
print_header "8. Verifying Setup"

# Test database connection
print_status "Testing database connection..."
if python -c "
import sys
sys.path.append('.')
from app.database.database import engine
from sqlalchemy import text
try:
    with engine.connect() as conn:
        result = conn.execute(text('SELECT 1'))
        print('Database connection successful')
except Exception as e:
    print(f'Database connection failed: {e}')
    sys.exit(1)
"; then
    print_success "Database connection verified"
else
    print_error "Database connection failed"
    exit 1
fi

# Test configuration loading
print_status "Testing configuration loading..."
if python -c "
import sys
sys.path.append('.')
from app.core.config import settings
print(f'Configuration loaded successfully')
print(f'Environment: {settings.ENVIRONMENT}')
print(f'Database URL: {settings.DATABASE_URL}')
print(f'CORS Origins: {settings.BACKEND_CORS_ORIGINS}')
"; then
    print_success "Configuration loading verified"
else
    print_error "Configuration loading failed"
    exit 1
fi

# =============================================================================
# 9. Final Instructions
# =============================================================================
print_header "9. Setup Complete! 🎉"

print_success "Your FastAPI Template development environment is ready!"
echo ""
echo "📋 Next Steps:"
echo "1. Start the development server:"
echo "   uvicorn app.main:app --reload"
echo ""
echo "2. Access your API:"
echo "   - API: http://localhost:8000"
echo "   - Docs: http://localhost:8000/docs"
echo "   - ReDoc: http://localhost:8000/redoc"
echo ""
echo "3. Optional services (if needed):"
echo "   - Redis: docker-compose --profile redis up redis -d"
echo "   - Celery: docker-compose --profile celery up -d"
echo "   - Monitoring: docker-compose --profile monitoring up -d"
echo ""
echo "4. Useful commands:"
echo "   - Run tests: pytest"
echo "   - Format code: black ."
echo "   - Lint code: ruff check ."
echo "   - Type check: mypy ."
echo ""
echo "🔧 Troubleshooting:"
echo "   - If you encounter issues, check the logs: docker-compose logs"
echo "   - Reset database: docker-compose down && docker-compose up postgres -d && alembic upgrade head"
echo "   - View setup script: cat scripts/setup_comprehensive.sh"
echo ""
echo "📚 Documentation:"
echo "   - Getting Started: docs/tutorials/getting-started.md"
echo "   - Tutorials: docs/tutorials/"
echo "   - API Reference: http://localhost:8000/docs (after starting server)"
echo ""

print_success "Happy coding! 🚀" 