"""
Python module version of the comprehensive setup script.

This module provides functions that can be imported and tested.
"""

import subprocess
from pathlib import Path


def create_env_file(env_path: Path) -> None:
    """Create a .env file with comprehensive configuration."""
    env_content = """# =============================================================================
# FastAPI Template Environment Configuration
# =============================================================================
# Generated by setup_comprehensive.py

# =============================================================================
# Docker Configuration (Required for docker-compose)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
PGBOUNCER_PORT=5433
REDIS_PORT=6379
API_PORT=8000
FLOWER_PORT=5555
GLITCHTIP_PORT=8001

# =============================================================================
# Application Settings
# =============================================================================
PROJECT_NAME=FastAPI Template
VERSION=1.0.0
DESCRIPTION=FastAPI Template with Authentication
API_V1_STR=/api/v1
ENVIRONMENT=development

# =============================================================================
# Security & Authentication
# =============================================================================
SECRET_KEY=dev_secret_key_change_in_production
ACCESS_TOKEN_EXPIRE_MINUTES=15
ALGORITHM=HS256

# =============================================================================
# Database Configuration
# =============================================================================
DATABASE_URL=postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

# =============================================================================
# CORS Configuration (JSON format)
# =============================================================================
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://localhost:4200"]

# =============================================================================
# Optional Features (disabled by default)
# =============================================================================
ENABLE_REDIS=false
ENABLE_WEBSOCKETS=false
ENABLE_CELERY=false
ENABLE_RATE_LIMITING=false
ENABLE_SENTRY=false

# =============================================================================
# Redis Configuration
# =============================================================================
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# Email Configuration (optional)
# =============================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_TLS=true
SMTP_SSL=false
FROM_EMAIL=noreply@example.com
FROM_NAME=FastAPI Template

# =============================================================================
# Superuser Bootstrap (optional)
# =============================================================================
# Uncomment and set these to create the first superuser automatically
# FIRST_SUPERUSER=admin@example.com
# FIRST_SUPERUSER_PASSWORD=admin_password_123
"""

    env_path.write_text(env_content)


def check_docker_services() -> bool:
    """Check if Docker services are available."""
    try:
        subprocess.run(
            ["docker", "--version"], capture_output=True, text=True, check=True
        )
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


def run_migrations() -> bool:
    """Run database migrations."""
    try:
        # Try to run migrations
        subprocess.run(
            ["alembic", "upgrade", "head"], capture_output=True, text=True, check=True
        )
        return True
    except subprocess.CalledProcessError:
        # If migration fails, try to stamp head
        try:
            subprocess.run(
                ["alembic", "stamp", "head"], capture_output=True, text=True, check=True
            )
            return True
        except subprocess.CalledProcessError:
            return False


def run_setup_workflow(project_root: Path) -> bool:
    """Run the complete setup workflow."""
    try:
        # Create .env file if it doesn't exist
        env_path = project_root / ".env"
        if not env_path.exists():
            create_env_file(env_path)

        # Check Docker services
        docker_available = check_docker_services()

        # Run migrations
        migrations_success = run_migrations()

        return docker_available and migrations_success
    except Exception:
        return False


if __name__ == "__main__":
    # This would run the full bash script logic
    pass
