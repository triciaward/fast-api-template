"""
Python module version of the fix common issues script.

This module provides functions that can be imported and tested.
"""

import json
import re
from pathlib import Path


def create_env_file(env_path: Path) -> None:
    """Create a .env file with comprehensive configuration."""
    env_content = """# =============================================================================
# FastAPI Template Environment Configuration
# =============================================================================
# Generated by fix_common_issues.py

# =============================================================================
# Docker Configuration (Required for docker-compose)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
PGBOUNCER_PORT=5433
REDIS_PORT=6379
API_PORT=8000
FLOWER_PORT=5555
GLITCHTIP_PORT=8001

# =============================================================================
# Application Settings
# =============================================================================
PROJECT_NAME=FastAPI Template
VERSION=1.0.0
DESCRIPTION=FastAPI Template with Authentication
API_V1_STR=/api/v1
ENVIRONMENT=development

# =============================================================================
# Security & Authentication
# =============================================================================
SECRET_KEY=dev_secret_key_change_in_production
ACCESS_TOKEN_EXPIRE_MINUTES=15
ALGORITHM=HS256

# =============================================================================
# Database Configuration
# =============================================================================
DATABASE_URL=postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

# =============================================================================
# CORS Configuration (comma-separated format)
# =============================================================================
BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:4200

# =============================================================================
# Optional Features (disabled by default)
# =============================================================================
ENABLE_REDIS=false
ENABLE_WEBSOCKETS=false
ENABLE_CELERY=false
ENABLE_RATE_LIMITING=false
ENABLE_SENTRY=false

# =============================================================================
# Redis Configuration
# =============================================================================
REDIS_URL=redis://localhost:6379/0

# =============================================================================
# Email Configuration (optional)
# =============================================================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_TLS=true
SMTP_SSL=false
FROM_EMAIL=noreply@example.com
FROM_NAME=FastAPI Template

# =============================================================================
# Superuser Bootstrap (optional)
# =============================================================================
# Uncomment and set these to create the first superuser automatically
# FIRST_SUPERUSER=admin@example.com
# FIRST_SUPERUSER_PASSWORD=admin_password_123
"""

    env_path.write_text(env_content)


def add_missing_docker_variables(env_path: Path) -> None:
    """Add missing Docker environment variables to existing .env file."""
    docker_vars = """# =============================================================================
# Docker Configuration (Added by fix script)
# =============================================================================
POSTGRES_DB=fastapi_template
POSTGRES_USER=postgres
POSTGRES_PASSWORD=dev_password_123
POSTGRES_PORT=5432
REDIS_PORT=6379
API_PORT=8000
"""

    # Read existing content
    content = env_path.read_text()

    # Add Docker variables if they don't exist
    if "POSTGRES_DB=" not in content:
        content += "\n" + docker_vars

    env_path.write_text(content)


def convert_cors_format(cors_input: str) -> str:
    """Convert CORS format to comma-separated string."""
    if not cors_input.strip():
        return ""

    # If already in comma-separated format, return as is
    if "," in cors_input and not cors_input.strip().startswith("["):
        return cors_input.strip()

    # Convert JSON array to comma-separated
    try:
        origins = json.loads(cors_input)
        if isinstance(origins, list):
            return ",".join(origins)
    except json.JSONDecodeError:
        pass

    # If it's a single string, return as is
    return cors_input.strip()


def fix_cors_format(env_path: Path) -> None:
    """Fix CORS configuration format in .env file."""
    content = env_path.read_text()

    # Find CORS line
    cors_pattern = r"^BACKEND_CORS_ORIGINS=(.*)$"
    match = re.search(cors_pattern, content, re.MULTILINE)

    if match:
        cors_value = match.group(1)

        # Check if it's in wrong format (JSON array)
        if cors_value.strip().startswith("[") and cors_value.strip().endswith("]"):
            # Convert to comma-separated format
            new_cors_value = convert_cors_format(cors_value)

            # Replace in content
            new_content = re.sub(
                cors_pattern,
                f"BACKEND_CORS_ORIGINS={new_cors_value}",
                content,
                flags=re.MULTILINE,
            )

            env_path.write_text(new_content)
    else:
        # Add CORS configuration if missing
        content += "\nBACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://localhost:4200\n"
        env_path.write_text(content)


def validate_alembic_config(alembic_path: Path) -> bool:
    """Validate alembic.ini configuration."""
    if not alembic_path.exists():
        return False

    content = alembic_path.read_text()

    # Check for required sections
    required_sections = ["[alembic]", "script_location", "sqlalchemy.url"]

    for section in required_sections:
        if section not in content:
            return False

    return True


def create_alembic_config(alembic_path: Path) -> None:
    """Create alembic.ini with proper configuration."""
    alembic_content = """[alembic]
script_location = alembic
sqlalchemy.url = postgresql://postgres:dev_password_123@localhost:5432/fastapi_template

[post_write_hooks]
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 79 REVISION_SCRIPT_FILENAME

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S
"""

    alembic_path.write_text(alembic_content)


def run_fix_workflow(project_root: Path) -> bool:
    """Run the complete fix workflow."""
    try:
        # Fix .env file
        env_path = project_root / ".env"
        if not env_path.exists():
            create_env_file(env_path)
        else:
            add_missing_docker_variables(env_path)
            fix_cors_format(env_path)

        # Fix alembic.ini
        alembic_path = project_root / "alembic.ini"
        if not validate_alembic_config(alembic_path):
            create_alembic_config(alembic_path)

        return True
    except Exception:
        return False


if __name__ == "__main__":
    # This would run the full bash script logic
    pass
