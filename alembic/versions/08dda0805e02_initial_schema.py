"""initial schema

Revision ID: 08dda0805e02
Revises: 
Create Date: 2025-08-07 14:13:20.578390

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '08dda0805e02'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False, comment="User's unique identifier"),
    sa.Column('email', sa.String(length=254), nullable=False, comment="User's email address"),
    sa.Column('username', sa.String(length=50), nullable=False, comment="User's unique username"),
    sa.Column('hashed_password', sa.String(length=255), nullable=True, comment='Hashed password (null for OAuth users)'),
    sa.Column('is_superuser', sa.Boolean(), nullable=False, comment='Whether user has superuser privileges'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment="Whether user's email is verified"),
    sa.Column('oauth_provider', sa.String(length=20), nullable=True, comment='OAuth provider name'),
    sa.Column('oauth_id', sa.String(length=255), nullable=True, comment="OAuth provider's user identifier"),
    sa.Column('oauth_email', sa.String(length=254), nullable=True, comment='Email address from OAuth provider'),
    sa.Column('verification_token', sa.String(length=255), nullable=True, comment='Token for email verification'),
    sa.Column('verification_token_expires', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Expiration time for verification token'),
    sa.Column('password_reset_token', sa.String(length=255), nullable=True, comment='Token for password reset'),
    sa.Column('password_reset_token_expires', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Expiration time for password reset token'),
    sa.Column('deletion_requested_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='When account deletion was requested'),
    sa.Column('deletion_confirmed_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='When account deletion was confirmed'),
    sa.Column('deletion_scheduled_for', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='When account deletion is scheduled'),
    sa.Column('deletion_token', sa.String(length=255), nullable=True, comment='Token for account deletion confirmation'),
    sa.Column('deletion_token_expires', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Expiration time for deletion token'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True, comment='User who deleted the record'),
    sa.Column('deletion_reason', sa.String(length=500), nullable=True, comment='Optional reason for deletion'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('deletion_token'),
    sa.UniqueConstraint('password_reset_token'),
    sa.UniqueConstraint('verification_token')
    )
    op.create_index('ix_user_deletion_token', 'users', ['deletion_token'], unique=False)
    op.create_index('ix_user_oauth_provider_id', 'users', ['oauth_provider', 'oauth_id'], unique=False)
    op.create_index('ix_user_password_reset_token', 'users', ['password_reset_token'], unique=False)
    op.create_index('ix_user_status', 'users', ['is_deleted', 'is_verified', 'is_superuser'], unique=False)
    op.create_index('ix_user_verification_token', 'users', ['verification_token'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_users_deleted_by'), 'users', ['deleted_by'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_users_is_superuser'), 'users', ['is_superuser'], unique=False)
    op.create_index(op.f('ix_users_is_verified'), 'users', ['is_verified'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index('uq_user_oauth', 'users', ['oauth_provider', 'oauth_id'], unique=True, postgresql_where='oauth_provider IS NOT NULL AND oauth_id IS NOT NULL')
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False, comment='API key unique identifier'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who owns this API key (null for system keys)'),
    sa.Column('key_hash', sa.String(length=255), nullable=False, comment='Hashed API key value'),
    sa.Column('key_fingerprint', sa.String(length=64), nullable=True, comment='Deterministic fingerprint (SHA-256) of API key for lookup'),
    sa.Column('label', sa.String(length=255), nullable=False, comment='Human-readable label for the API key'),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='List of permission scopes for this key'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the API key is active'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='When the API key expires (null for no expiration)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True, comment='User who deleted the record'),
    sa.Column('deletion_reason', sa.String(length=500), nullable=True, comment='Optional reason for deletion'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_api_key_fingerprint', 'api_keys', ['key_fingerprint'], unique=False)
    op.create_index('ix_api_key_scopes', 'api_keys', ['scopes'], unique=False, postgresql_using='gin')
    op.create_index('ix_api_key_system', 'api_keys', ['is_active', 'expires_at'], unique=False)
    op.create_index('ix_api_key_user_active', 'api_keys', ['user_id', 'is_active', 'expires_at'], unique=False)
    op.create_index(op.f('ix_api_keys_created_at'), 'api_keys', ['created_at'], unique=False)
    op.create_index(op.f('ix_api_keys_deleted_at'), 'api_keys', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_api_keys_deleted_by'), 'api_keys', ['deleted_by'], unique=False)
    op.create_index(op.f('ix_api_keys_expires_at'), 'api_keys', ['expires_at'], unique=False)
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_is_active'), 'api_keys', ['is_active'], unique=False)
    op.create_index(op.f('ix_api_keys_is_deleted'), 'api_keys', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_api_keys_key_fingerprint'), 'api_keys', ['key_fingerprint'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.create_index(op.f('ix_api_keys_updated_at'), 'api_keys', ['updated_at'], unique=False)
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False, comment='Audit log entry unique identifier'),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='When the event occurred'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='User who performed the action (null for system events)'),
    sa.Column('event_type', sa.String(length=100), nullable=False, comment="Type of event (e.g., 'login_success', 'password_change')"),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the client'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent string from the client'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='Whether the event was successful'),
    sa.Column('context', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='Additional event metadata as JSON'),
    sa.Column('session_id', sa.String(length=255), nullable=True, comment='Session identifier for correlation'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_audit_log_event_success', 'audit_logs', ['event_type', 'success', 'timestamp'], unique=False)
    op.create_index('ix_audit_log_failed_events', 'audit_logs', ['timestamp', 'event_type', 'user_id'], unique=False, postgresql_where='success = false')
    op.create_index('ix_audit_log_ip_timestamp', 'audit_logs', ['ip_address', 'timestamp'], unique=False)
    op.create_index('ix_audit_log_session_timestamp', 'audit_logs', ['session_id', 'timestamp'], unique=False)
    op.create_index('ix_audit_log_timestamp_user', 'audit_logs', ['timestamp', 'user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_event_type'), 'audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_ip_address'), 'audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_audit_logs_session_id'), 'audit_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_success'), 'audit_logs', ['success'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), nullable=False, comment='Refresh token unique identifier'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who owns this refresh token'),
    sa.Column('token_hash', sa.String(length=255), nullable=False, comment='Hashed refresh token value'),
    sa.Column('token_fingerprint', sa.String(length=64), nullable=True, comment='Deterministic fingerprint of the refresh token for lookup'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='When the refresh token expires'),
    sa.Column('is_revoked', sa.Boolean(), nullable=False, comment='Whether the token has been revoked'),
    sa.Column('device_info', sa.Text(), nullable=True, comment='Device information (browser, OS, etc.)'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address where token was created'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True, comment='User who deleted the record'),
    sa.Column('deletion_reason', sa.String(length=500), nullable=True, comment='Optional reason for deletion'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_refresh_token_fingerprint', 'refresh_tokens', ['token_fingerprint'], unique=False)
    op.create_index('ix_refresh_token_ip_timestamp', 'refresh_tokens', ['ip_address', 'created_at'], unique=False)
    op.create_index('ix_refresh_token_revoked', 'refresh_tokens', ['user_id', 'created_at'], unique=False, postgresql_where='is_revoked = true')
    op.create_index('ix_refresh_token_user_active', 'refresh_tokens', ['user_id', 'is_revoked', 'expires_at'], unique=False)
    op.create_index('ix_refresh_token_validation', 'refresh_tokens', ['token_hash', 'is_revoked', 'expires_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_created_at'), 'refresh_tokens', ['created_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_deleted_at'), 'refresh_tokens', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_deleted_by'), 'refresh_tokens', ['deleted_by'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_expires_at'), 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_ip_address'), 'refresh_tokens', ['ip_address'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_is_deleted'), 'refresh_tokens', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_is_revoked'), 'refresh_tokens', ['is_revoked'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token_fingerprint'), 'refresh_tokens', ['token_fingerprint'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token_hash'), 'refresh_tokens', ['token_hash'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_updated_at'), 'refresh_tokens', ['updated_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_updated_at'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token_hash'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token_fingerprint'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_is_revoked'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_is_deleted'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_ip_address'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_expires_at'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_deleted_by'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_deleted_at'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_created_at'), table_name='refresh_tokens')
    op.drop_index('ix_refresh_token_validation', table_name='refresh_tokens')
    op.drop_index('ix_refresh_token_user_active', table_name='refresh_tokens')
    op.drop_index('ix_refresh_token_revoked', table_name='refresh_tokens', postgresql_where='is_revoked = true')
    op.drop_index('ix_refresh_token_ip_timestamp', table_name='refresh_tokens')
    op.drop_index('ix_refresh_token_fingerprint', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_success'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_session_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_type'), table_name='audit_logs')
    op.drop_index('ix_audit_log_timestamp_user', table_name='audit_logs')
    op.drop_index('ix_audit_log_session_timestamp', table_name='audit_logs')
    op.drop_index('ix_audit_log_ip_timestamp', table_name='audit_logs')
    op.drop_index('ix_audit_log_failed_events', table_name='audit_logs', postgresql_where='success = false')
    op.drop_index('ix_audit_log_event_success', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_updated_at'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_fingerprint'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_deleted'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_active'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_expires_at'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_deleted_by'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_deleted_at'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_created_at'), table_name='api_keys')
    op.drop_index('ix_api_key_user_active', table_name='api_keys')
    op.drop_index('ix_api_key_system', table_name='api_keys')
    op.drop_index('ix_api_key_scopes', table_name='api_keys', postgresql_using='gin')
    op.drop_index('ix_api_key_fingerprint', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index('uq_user_oauth', table_name='users', postgresql_where='oauth_provider IS NOT NULL AND oauth_id IS NOT NULL')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_is_verified'), table_name='users')
    op.drop_index(op.f('ix_users_is_superuser'), table_name='users')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_by'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('ix_user_verification_token', table_name='users')
    op.drop_index('ix_user_status', table_name='users')
    op.drop_index('ix_user_password_reset_token', table_name='users')
    op.drop_index('ix_user_oauth_provider_id', table_name='users')
    op.drop_index('ix_user_deletion_token', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ### 